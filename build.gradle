buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url 'http://repo.spring.io/plugins-release'
        }
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
    }
}

plugins {
    id "io.spring.dependency-management" version "1.0.0.RELEASE"
}

ext {
    springBootVersion = "1.5.2.RELEASE"
    junitVersion = "4.12"
    junitHierarchicalcontextrunnerVersion = "4.12.1"
    assertjVersion = "3.5.2"
    mapStructVersion = "1.1.0.Final"
}

group 'com.github.thekingnothing'
version '0.1.0'

subprojects {
    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'propdeps'
    apply plugin: 'propdeps-maven'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = 1.8
}

project(":kalah-core") {
    description = "Game engine."

    dependencies {
        testCompile("junit:junit:${junitVersion}")
        testCompile("de.bechte.junit:junit-hierarchicalcontextrunner:${junitHierarchicalcontextrunnerVersion}")
        testCompile("org.assertj:assertj-core:${assertjVersion}")
        testCompile("io.github.benas:random-beans:3.7.0")
        testCompile("org.apache.commons:commons-lang3:3.6")
    }
}

project(":kalah-service") {
    dependencies {
        compile(project(":kalah-core"))
        compile("org.springframework.boot:spring-boot-starter")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }
}

project(":kalah-repository") {
    dependencies {
        compile(project(":kalah-service"))
        compile("org.springframework.boot:spring-boot-starter")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }
}

project(":kalah-rest") {

    ext {
        javaLanguageLevel = '1.8'
        generatedMapperSourcesDir = "${buildDir}/generated-src/mapstruct/main"
    }

    sourceCompatibility = project.javaLanguageLevel

    configurations {
        mapstruct
    }

    sourceSets.main {
        ext.originalJavaSrcDirs = java.srcDirs
        java.srcDir "${generatedMapperSourcesDir}"
    }

    dependencies {
        compile(project(":kalah-service"))
        compile(project(":kalah-repository"))
        compile("org.springframework:spring-web")
        compile("org.springframework:spring-webmvc")

        compile( "org.mapstruct:mapstruct:${mapStructVersion}" )
        mapstruct( "org.mapstruct:mapstruct-processor:${mapStructVersion}" )

        testCompile("org.springframework.boot:spring-boot-starter-test")
    }

    dependencyManagement {
        imports { mavenBom("org.springframework.boot:spring-boot-dependencies:${springBootVersion}") }
    }

    task generateMainMapperClasses(type: JavaCompile) {
        ext.aptDumpDir = file( "${buildDir}/tmp/apt/mapstruct" )
        destinationDir = aptDumpDir

        classpath = compileJava.classpath + configurations.mapstruct
        source = sourceSets.main.originalJavaSrcDirs
        ext.sourceDestDir = file ( "$generatedMapperSourcesDir" )

        options.define(
                compilerArgs: [
                        "-nowarn",
                        "-proc:only",
                        "-encoding", "UTF-8",
                        "-processor", "org.mapstruct.ap.MappingProcessor",
                        "-s", sourceDestDir.absolutePath,
                        "-source", project.javaLanguageLevel,
                        "-target", project.javaLanguageLevel,
                ]
        );

        inputs.dir source
        outputs.dir generatedMapperSourcesDir;
        doFirst {
            sourceDestDir.mkdirs()
        }
        doLast {
            aptDumpDir.delete()
        }
    }

    compileJava.dependsOn generateMainMapperClasses
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.4.1'
}

